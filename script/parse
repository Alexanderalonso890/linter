#!/usr/bin/env ruby
require 'rubygems'
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", 'lib')))
require "bundler/setup"
require 'rdf/linter'
require 'getoptlong'
require 'open-uri'

include RDF::Linter::Parser

def run(options)
  start = Time.new
  num = 0

  content = parse(options).last
  options[:output].puts content
  STDERR.puts
  secs = Time.new - start
  STDERR.puts "Parsed #{num} statements in #{secs} seconds @ #{num/secs} statements/second."
rescue
  STDERR.puts("Error in #{options.inspect}")
  raise
end

options = {
  :verbose => false,
  :validate => false,
  :strict => true,
  :output => STDOUT,
  :format => :all,
}
input = nil

opts = GetoptLong.new(
  ["--dbg", GetoptLong::NO_ARGUMENT],
  ["--rdfa-dbg", GetoptLong::NO_ARGUMENT],
  ["--microdata-dbg", GetoptLong::NO_ARGUMENT],
  ["--jsonld-dbg", GetoptLong::NO_ARGUMENT],
  ["--execute", "-e", GetoptLong::REQUIRED_ARGUMENT],
  ["--format", GetoptLong::REQUIRED_ARGUMENT],
  ["--output", "-o", GetoptLong::REQUIRED_ARGUMENT],
  ["--quiet", GetoptLong::NO_ARGUMENT],
  ["--uri", GetoptLong::REQUIRED_ARGUMENT],
  ["--verbose", GetoptLong::NO_ARGUMENT]
)
opts.each do |opt, arg|
  case opt
  when '--dbg'            then ::RDF::Linter::debug = true
  when '--jsonld-dbg'       then ::JSON::LD::debug = true
  when '--rdfa-dbg'       then ::RDF::RDFa::debug = true
  when '--microdata-dbg'  then ::RDF::Microdata::debug = true
  when '--execute'        then input = arg
  when '--format'         then options[:output_format] = arg.to_sym
  when '--output'         then options[:output] = File.open(arg, "w")
  when '--uri'            then options[:base_uri] = arg
  when '--verbose'        then options[:verbose] = true
  end
end

if ARGV.empty?
  run({content: input || $stdin, base_uri: "http://example/"}.merge(options))
else
  ARGV.each do |test_file|
    run({base_uri: test_file}.merge(options))
  end
end
