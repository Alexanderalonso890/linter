#!/usr/bin/env ruby
require 'rubygems'
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", 'lib')))
require 'rdf/linter'
require 'getoptlong'
require 'open-uri'

include RDF::Linter::Parser

def run(input, options)
  start = Time.new
  num = 0

  encoding, content = parse(options.merge(:content => input))
  options[:output].puts content
  STDERR.puts
  secs = Time.new - start
  STDERR.puts "Parsed #{num} statements in #{secs} seconds @ #{num/secs} statements/second."
rescue
  fname = input.respond_to?(:path) ? input.path : "-stdin-"
  STDERR.puts("Error in #{fname}")
  raise
end

options = {
  :verbose => false,
  :validate => false,
  :strict => true,
  :output => STDOUT,
  :format => :all,
  :base_uri => "http://example.com",
}
input = nil

opts = GetoptLong.new(
  ["--dbg", GetoptLong::NO_ARGUMENT],
  ["--execute", "-e", GetoptLong::REQUIRED_ARGUMENT],
  ["--output", "-o", GetoptLong::REQUIRED_ARGUMENT],
  ["--quiet", GetoptLong::NO_ARGUMENT],
  ["--uri", GetoptLong::REQUIRED_ARGUMENT],
  ["--verbose", GetoptLong::NO_ARGUMENT]
)
opts.each do |opt, arg|
  case opt
  when '--dbg'          then ::RDF::All::debug = ::RDF::Microdata::debug = ::RDF::RDFa::debug = true
  when '--execute'      then input = arg
  when '--format'       then options[:output_format] = arg.to_sym
  when '--output'       then options[:output] = File.open(arg, "w")
  when '--uri'          then options[:base_uri] = arg
  when '--verbose'      then options[:verbose] = true
  end
end

if ARGV.empty?
  s = input ? input : $stdin.read
  run(StringIO.new(s), options)
else
  ARGV.each do |test_file|
    run(Kernel.open(test_file), options)
  end
end
